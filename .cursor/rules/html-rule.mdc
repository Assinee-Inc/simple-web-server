# UI HTML Files Rule - DashUI Template

## Framework e Template
- **Template Base**: DashUI - Template administrativo moderno baseado em Bootstrap 5
- **CSS Framework**: Bootstrap 5 com classes utilitárias customizadas
- **Ícones**: Feather Icons (data-feather) para consistência visual
- **JavaScript**: Vanilla JS com funcionalidades do Bootstrap 5

## Localização
- Todos os arquivos de páginas HTML devem ser definidos no diretório `web/pages/`.
- Todos os templates de email devem ser definidos no diretório `web/mails/`.
- Todos os layouts HTML devem ser definidos no diretório `web/layouts/`.
- Todos os assets (CSS, JS, imagens, fontes, etc.) devem ser definidos no diretório `web/assets/`.
- Partials reutilizáveis devem ser definidos no diretório `web/partials/`.

## Nomeação
- O nome do arquivo deve ser descritivo e utilizar letras minúsculas e underscores para separar palavras (ex: `client_create.html`, `dashboard.html`).
- Para páginas relacionadas a uma feature específica, utilize subdiretórios (ex: `client/create.html`, `file/upload.html`).

## Estrutura DashUI

### Layouts
- **admin.html**: Layout principal para área administrativa com sidebar e navbar
- **guest.html**: Layout para páginas públicas (login, registro, etc.)
- Layouts devem conter elementos comuns e utilizar placeholders para conteúdo dinâmico

### Páginas
- **Container Fluid**: Sempre usar `<div class="container-fluid p-6">` como wrapper principal
- **Page Header**: Incluir header com título, descrição e ações principais
- **Content Area**: Área de conteúdo com cards e componentes

### Partials
- **table-footer.html**: Paginação padronizada para tabelas
- **empty-table.html**: Estado vazio com call-to-action
- **flash-messages.html**: Mensagens de feedback do sistema

## Padrões de Design DashUI

### Cores e Classes
- **Primária**: `btn-primary`, `bg-primary`, `text-primary`
- **Secundária**: `btn-outline-secondary`, `bg-light`
- **Sucesso**: `badge bg-success-subtle text-success`
- **Perigo**: `badge bg-danger-subtle text-danger`
- **Aviso**: `badge bg-warning-subtle text-warning`
- **Info**: `badge bg-info-subtle text-info`

### Componentes Padrão

#### Cards
```html
<div class="card h-100">
  <div class="card-header bg-white py-4">
    <!-- Header content -->
  </div>
  <div class="card-body">
    <!-- Card content -->
  </div>
  <div class="card-footer">
    <!-- Footer content -->
  </div>
</div>
```

#### Tabelas
```html
<div class="table-responsive">
  <table class="table table-hover text-nowrap">
    <thead class="table-light">
      <tr>
        <th scope="col" class="border-0">Coluna</th>
      </tr>
    </thead>
    <tbody>
      <!-- Table rows -->
    </tbody>
  </table>
</div>
```

#### Avatares
```html
<div class="avatar avatar-sm avatar-indicators avatar-online">
  <div class="avatar-content bg-primary">
    <span class="text-white fw-bold">{{ .GetInitials }}</span>
  </div>
</div>
```

#### Badges
```html
<span class="badge bg-success-subtle text-success">
  <i data-feather="check-circle" class="icon-xs me-1"></i>
  Ativo
</span>
```

#### Botões
```html
<a href="#" class="btn btn-primary">
  <i data-feather="plus" class="icon-xs me-2"></i>
  Adicionar
</a>
```

#### Dropdowns
```html
<div class="dropdown dropstart">
  <a class="btn btn-sm btn-icon btn-ghost-secondary rounded-circle" href="#" data-bs-toggle="dropdown">
    <i data-feather="more-vertical" class="icon-xs"></i>
  </a>
  <div class="dropdown-menu">
    <a class="dropdown-item" href="#">
      <i data-feather="edit-2" class="icon-xs me-2"></i>
      Editar
    </a>
  </div>
</div>
```

### Estrutura de Página Padrão
```html
{{ define "title" }} Título da Página {{ end }}
{{ define "content" }}
<div class="container-fluid p-6">
  <!-- Page Header -->
  <div class="row">
    <div class="col-lg-12 col-md-12 col-12">
      <div class="border-bottom pb-4 mb-4">
        <div class="row align-items-center">
          <div class="col">
            <h3 class="mb-0 fw-bold">Título</h3>
            <p class="mb-0 text-muted">Descrição</p>
          </div>
          <div class="col-auto">
            <!-- Actions -->
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Content -->
  <div class="py-6">
    <div class="row">
      <div class="col-xl-12 col-lg-12 col-md-12 col-12">
        <div class="card h-100">
          <!-- Card content -->
        </div>
      </div>
    </div>
  </div>
</div>
{{end}}
```

## Responsabilidade
- Os arquivos HTML não devem conter lógica de negócio, apenas marcação e placeholders para dados dinâmicos.
- A lógica de renderização e injeção de dados deve ser feita nos handlers do backend.
- Dados são acessados diretamente através de `.Variavel` no template.

## Boas práticas DashUI

### Design System
- **Consistência Visual**: Sempre usar as classes e componentes do DashUI
- **Responsividade**: Utilizar classes Bootstrap 5 para diferentes breakpoints
- **Acessibilidade**: Manter HTML semântico e atributos ARIA quando necessário
- **Performance**: Otimizar carregamento de imagens e assets

### Componentes Reutilizáveis
- **Formulários**: Usar classes `form-control`, `form-select`, `form-check`
- **Navegação**: Utilizar `navbar`, `sidebar`, `breadcrumb`
- **Feedback**: Implementar `toast`, `alert`, `modal`
- **Estados**: Criar estados vazios, loading e erro consistentes

### JavaScript e Interatividade
- **Bootstrap JS**: Utilizar componentes JavaScript do Bootstrap 5
- **Feather Icons**: Implementar ícones com `data-feather` attribute
- **Eventos**: Usar `data-bs-toggle` para modals, dropdowns, etc.
- **Validação**: Implementar validação client-side quando necessário

### Padrões de Código
- **Indentação**: 2 espaços para HTML
- **Classes CSS**: Ordem lógica (layout, spacing, typography, colors)
- **Comentários**: Incluir comentários para seções complexas
- **Nomenclatura**: Usar nomes descritivos para classes e IDs

## Exemplo de estrutura mínima

```
web/
  layouts/
    admin.html          # Layout principal DashUI
    guest.html          # Layout público
  pages/
    client/
      create.html       # Formulário de criação
      update.html       # Formulário de edição
    dashboard.html      # Dashboard principal
    login.html          # Página de login
    ...
  partials/
    client_form.html    # Formulário reutilizável
    empty_table.html    # Estado vazio padronizado
    table_footer.html   # Paginação
    flash_message.html  # Mensagens de feedback
    ...
  mails/
    account_confirmation.html
    ...
  assets/
    css/
      theme.min.css     # CSS principal DashUI
    js/
      theme.min.js      # JS principal DashUI
    images/
      svg/              # Ícones SVG
      placeholder/      # Imagens placeholder
```

## Testes
- **Cypress E2E**: Testes end-to-end para fluxos críticos
- **Responsividade**: Testar em diferentes tamanhos de tela
- **Acessibilidade**: Verificar navegação por teclado e leitores de tela
- **Performance**: Otimizar carregamento e renderização 
    js/
    images/
``` 