---
alwaysApply: true
---

# Project Structure
The main server setup and entry point is defined in cmd/web/main.go

## SSR Handlers
- All SSR handlers are defined in internal/handler/

## Services
- All services are defined in internal/service/

## Repositories
- All repositories are defined in internal/repository/

## UI - DashUI Template
- All html pages are defined in web/pages
- All templates email are defined in web/mails
- All layouts are defined in web/layouts
- All assets are defined in web/assets
- **Template**: DashUI - Bootstrap 5 Admin Dashboard Template
- **CSS**: theme.min.css (DashUI custom styles)
- **JS**: theme.min.js (DashUI custom scripts)
- **Icons**: Feather Icons (data-feather attribute)
- **Components**: Cards, Tables, Forms, Modals, Dropdowns

## External Services
- Located in pkg/

## Libraries
- GORM: All models are localized in internal/models/
- SQLite: When running local
- Postgres: When running in production
- **Frontend**: DashUI (Bootstrap 5 + Custom Components)
- **Icons**: Feather Icons
- **JavaScript**: Vanilla JS + Bootstrap 5 JS

## Tests
- The test are included in same path of implementation and you package has a sufix '_test' in package name. Exemple: If package is 'cookie', the test will be in 'cookie_test'
- To run tests use the command `make test`
- Always include tests for each feature or problem encountered or modifications

## Server
- To start web server use the command `make run`

## Rules
- Always use clear, descriptive, and meaningful names for variables, functions, and methods, following Clean Code recommendations to facilitate code readability and maintainability.
- Implement code adhering to S.O.L.I.D principles, ensuring high cohesion, low coupling, and easy extensibility and maintainability.
- Always use the good practices of dependency injection
- Never use emoji in code
