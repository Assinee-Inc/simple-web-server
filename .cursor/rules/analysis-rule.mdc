# Analysis Before Modification Rule

## Objetivo
Sempre realizar uma análise completa e estruturada antes de fazer qualquer modificação no código, evitando mudanças desnecessárias e garantindo que as soluções sejam adequadas.

## Regras Obrigatórias

### 1. Análise Inicial Obrigatória
- **SEMPRE** começar com uma análise do problema reportado
- **SEMPRE** identificar todos os arquivos e componentes afetados
- **SEMPRE** entender o contexto completo antes de propor soluções

### 2. Estrutura de Análise
Antes de qualquer modificação, deve-se:

#### A. Identificar o Problema
- Descrever claramente o problema reportado
- Identificar os sintomas e erros específicos
- Entender o impacto no usuário

#### B. Mapear Componentes Afetados
- Listar todos os arquivos que podem estar relacionados
- Identificar dependências entre componentes
- Verificar se há regras específicas do projeto que se aplicam

#### C. Analisar o Estado Atual
- Examinar como está implementado atualmente
- Identificar padrões já estabelecidos no projeto
- Verificar se há testes existentes

#### D. Propor Solução Estruturada
- Descrever exatamente o que será modificado
- Explicar por que cada mudança é necessária
- Listar os benefícios da solução proposta

### 3. Verificações Obrigatórias
Antes de implementar qualquer mudança:

#### A. Verificar Regras do Projeto
- Consultar todas as regras relevantes (handler, service, repository, etc.)
- Garantir que a solução segue os padrões estabelecidos
- Verificar se há regras específicas para o tipo de modificação

#### B. Verificar Dependências
- Identificar se a mudança afeta outros componentes
- Verificar se há testes que precisam ser atualizados
- Garantir que não quebra funcionalidades existentes

#### C. Verificar Contexto
- Entender o fluxo completo da funcionalidade
- Verificar se há validações no backend que precisam ser ajustadas
- Identificar se há templates ou frontend que precisam ser atualizados

### 4. Documentação da Análise
Sempre documentar:

#### A. Problema Identificado
```
## Problema Reportado
- Descrição clara do problema
- Erros específicos encontrados
- Impacto no usuário
```

#### B. Componentes Afetados
```
## Arquivos/Componentes Afetados
- Lista de arquivos que precisam ser modificados
- Dependências identificadas
- Regras do projeto que se aplicam
```

#### C. Solução Proposta
```
## O que será feito:
1. Modificação específica 1
2. Modificação específica 2
3. Modificação específica 3
```

### 5. Validação Antes da Implementação
- **SEMPRE** apresentar a análise completa antes de implementar
- **SEMPRE** aguardar confirmação do usuário antes de fazer modificações
- **SEMPRE** explicar o impacto de cada mudança proposta

### 6. Exceções
A única exceção para não fazer análise completa é quando:
- O usuário explicitamente solicita uma modificação específica e direta
- A modificação é trivial e não afeta outros componentes
- É uma correção de bug simples e isolada

## Exemplo de Análise

```
## Análise do Problema

### Problema Reportado
- Usuário reportou erro de parsing de data no formulário
- Erro específico: "formato de data de nascimento inválido"
- Impacto: Usuários não conseguem cadastrar com datas válidas

### Componentes Afetados
- Formulários HTML com campos de data
- Validação no backend
- Máscaras JavaScript (jmask)
- Templates de erro

### Estado Atual
- Campos usando type="date" não aplicam máscara
- Validação só aceita formato YYYY-MM-DD
- jmask configurado mas não aplicado corretamente

### Solução Proposta
1. Alterar campos de data para type="text" com classe "date"
2. Atualizar validação para aceitar DD/MM/YYYY
3. Verificar se jmask está sendo carregado corretamente
4. Testar todos os formulários afetados

### Regras do Projeto Aplicáveis
- Handler Construction Rule
- HTML Rule para formulários
- Service Construction Rule para validações
```

## Penalidades
- **NUNCA** fazer modificações sem análise prévia
- **NUNCA** ignorar regras estabelecidas do projeto
- **NUNCA** implementar soluções sem entender o contexto completo
description:
globs:
alwaysApply: false
---
