---
alwaysApply: true
---

# Handler Construction Rule

## Localização
- Todos os handlers devem ser definidos no diretório `internal/handler/`.

## Nomeação
- O nome do arquivo deve seguir o padrão: `<feature>_handler.go` (ex: `client_handler.go`).
- O nome da struct principal do handler deve ser `<Feature>Handler` (ex: `ClientHandler`).

## Estrutura
- O handler deve ser implementado como uma struct, utilizando injeção de dependências para serviços necessários.
- O construtor do handler deve ser uma função `New<Feature>Handler`, recebendo explicitamente as dependências.
- Métodos do handler devem ser funções públicas (iniciando com maiúscula) e receber o contexto do framework web (ex: `echo.Context`, `gin.Context`, etc).

## Responsabilidade
- O handler deve ser responsável apenas por:
  - Receber e validar requisições HTTP.
  - Chamar os serviços apropriados.
  - Retornar respostas HTTP.
- Não deve conter lógica de negócio, que deve estar nos serviços.

## Boas práticas
- Utilizar nomes claros e descritivos para métodos, refletindo a ação executada (ex: `CreateClient`, `UpdateClient`).
- Validar e tratar erros de forma consistente, retornando respostas HTTP adequadas.
- Utilizar middlewares para autenticação, autorização e logging, evitando lógica repetida nos handlers.
- Sempre incluir testes para cada handler, cobrindo casos de sucesso e falha.

## Exemplo de estrutura mínima

```go
// internal/handler/client_handler.go

type ClientHandler struct {
    clientService service.ClientService
}

func NewClientHandler(clientService service.ClientService) *ClientHandler {
    return &ClientHandler{clientService: clientService}
}

func (h *ClientHandler) CreateClient(c echo.Context) error {
    // Validação, chamada de serviço, resposta
}
```
