---
description:
globs:
alwaysApply: false
---
# Test Construction Rule

## Localização
- Os testes devem ser incluídos no mesmo diretório do código de implementação correspondente.
- O nome do arquivo de teste deve seguir o padrão: `<feature>_test.go` (ex: `client_handler_test.go`).
- O nome do pacote de teste deve ser igual ao do arquivo testado, acrescido do sufixo `_test` (ex: `package client_test`).

## Estrutura
- Cada função de teste deve começar com `Test` seguido do nome da função ou cenário testado (ex: `TestCreateClient_Success`).
- Utilizar funções auxiliares (helpers) para evitar repetição de código.
- Utilizar mocks para dependências externas, repositórios e serviços, facilitando o isolamento dos testes.

## Responsabilidade
- Os testes devem cobrir casos de sucesso, falha e cenários de borda.
- Devem validar o comportamento esperado, incluindo tratamento de erros e validações.
- Devem garantir que as regras de negócio e integrações estejam corretas.

## Boas práticas
- Utilizar nomes claros e descritivos para funções de teste, refletindo o cenário testado.
- Garantir que os testes sejam independentes e idempotentes.
- Utilizar tabelas de teste (table-driven tests) para múltiplos cenários semelhantes.
- Sempre rodar todos os testes antes de realizar commits.
- Utilizar o comando `make test` para rodar todos os testes do projeto.

## Exemplo de estrutura mínima

```go
// internal/handler/client_handler_test.go

package handler_test

import (
    "errors"
    "net/http"
    "net/http/httptest"
    "testing"

    "github.com/labstack/echo/v4"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/mock"
    "simplewebserver/internal/handler"
    "simplewebserver/internal/service/mocks"
)

func TestCreateClient_Success(t *testing.T) {
    e := echo.New()
    req := httptest.NewRequest(http.MethodPost, "/clients", nil)
    rec := httptest.NewRecorder()
    c := e.NewContext(req, rec)

    mockService := new(mocks.MockClientService)
    mockService.On("CreateClient", mock.Anything).Return(nil)

    h := handler.NewClientHandler(mockService)
    err := h.CreateClient(c)

    assert.NoError(t, err)
    assert.Equal(t, http.StatusOK, rec.Code)
}

func TestCreateClient_Error(t *testing.T) {
    e := echo.New()
    req := httptest.NewRequest(http.MethodPost, "/clients", nil)
    rec := httptest.NewRecorder()
    c := e.NewContext(req, rec)

    mockService := new(mocks.MockClientService)
    mockService.On("CreateClient", mock.Anything).Return(errors.New("error"))

    h := handler.NewClientHandler(mockService)
    err := h.CreateClient(c)

    assert.Error(t, err)
}
```
